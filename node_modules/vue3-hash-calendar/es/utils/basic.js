var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { isLeap } from ".";
import language from "../language";
const formatDate = function(time, format, lang = "CN") {
  const languageEntiy = language[lang] || {};
  format = format || `${languageEntiy.DEFAULT_DATE_FORMAT} ${languageEntiy.DEFAULT_TIME_FORMAT}`;
  const date = time ? new Date(time) : new Date();
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hour = date.getHours();
  const min = date.getMinutes();
  const sec = date.getSeconds();
  const preArr = Array.apply(null, Array(10)).map((elem, index) => "0" + index);
  const newTime = format.replace(/YY/g, year + "").replace(/F/g, hour >= 12 ? "pm" : "am").replace(/ss/g, preArr[sec] || sec + "").replace(/mm/g, preArr[min] || min + "").replace(
    /hh/g,
    hour > 12 && format.includes("F") ? hour - 12 + "" : format.includes("F") ? hour + "" : preArr[hour] || hour + ""
  ).replace(/DD/g, preArr[day] || day + "").replace(
    /MM/g,
    lang === "EN" ? languageEntiy.MONTH[month - 1] : preArr[month] || month + ""
  );
  return newTime;
};
const fillNumber = (val) => val > 9 ? val : "0" + val;
const daysOfMonth = (year) => [
  31,
  28 + isLeap(year),
  31,
  30,
  31,
  30,
  31,
  31,
  30,
  31,
  30,
  31
];
const getDayOfWeek = (year = new Date().getFullYear(), month = new Date().getMonth(), day = 1) => {
  const dayOfMonth = new Date(year, month, day);
  const dayOfWeek = dayOfMonth.getDay();
  return dayOfWeek;
};
function pick(obj, keys, ignoreUndefined) {
  return keys.reduce((ret, key) => {
    if (!ignoreUndefined || obj[key] !== void 0) {
      ret[key] = obj[key];
    }
    return ret;
  }, {});
}
const transDateToYearMonthDay = (date) => {
  if (!date)
    return date;
  return {
    year: date.getFullYear(),
    month: date.getMonth(),
    day: date.getDate()
  };
};
const transDateToHourMinute = (date) => {
  if (!date)
    return date;
  return {
    year: date.getFullYear(),
    month: date.getMonth(),
    day: date.getDate(),
    hours: date.getHours(),
    minutes: date.getMinutes()
  };
};
const transYearMontDayToDate = (date) => {
  const { year, month, day } = date;
  return new Date(year, month, day, 0, 0, 0, 0);
};
const transHourMinuteToDate = (date) => {
  const { year, month, day, minutes, hours } = date;
  return new Date(
    transYearMontDayToDate({ year, month, day }).setHours(hours, minutes, 0, 0)
  );
};
const getMinDate = (min) => min && new Date(min.setHours(0, 0, 0, 0)).getTime() - 24 * 60 * 60 * 1e3;
const getMaxDate = (max) => max && new Date(max.setHours(0, 0, 0, 0)).getTime() + 24 * 60 * 60 * 1e3;
function compareMonth(date1, date2) {
  const year1 = date1.year;
  const year2 = date2.year;
  if (year1 === year2) {
    const month1 = date1.month;
    const month2 = date2.month;
    return month1 === month2 ? 0 : month1 > month2 ? 1 : -1;
  }
  return year1 > year2 ? 1 : -1;
}
function compareDay(day1, day2) {
  const compareMonthResult = compareMonth(day1, day2);
  if (compareMonthResult === 0) {
    const date1 = day1.day;
    const date2 = day2.day;
    return date1 === date2 ? 0 : date1 > date2 ? 1 : -1;
  }
  return compareMonthResult;
}
const cloneDate = (date) => new Date(date);
const cloneDates = (dates) => Array.isArray(dates) ? dates.map(cloneDate) : cloneDate(dates);
function getDayByOffset(date, offset) {
  const cloned = cloneDate(date);
  cloned.setDate(cloned.getDate() + offset);
  return cloned;
}
const getPrevDay = (date) => {
  if (!date)
    return date;
  const currDate = transYearMontDayToDate(date);
  return getDayByOffset(currDate, -1);
};
const getNextDay = (date) => {
  if (!date)
    return date;
  const currDate = transYearMontDayToDate(date);
  return getDayByOffset(currDate, 1);
};
const getToday = () => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return today;
};
function calcDateNum(date) {
  const day1 = date[0].getTime();
  const day2 = date[1].getTime();
  return (day2 - day1) / (1e3 * 60 * 60 * 24) + 1;
}
function calcMiddleDay(date) {
  const [date1, date2] = date.map((item) => transYearMontDayToDate(item));
  const dateNum = calcDateNum([date1, date2]);
  if (dateNum > 2) {
    let nextDate = __spreadProps(__spreadValues({}, date[0]), { type: "start" });
    const dateArr = [];
    while (compareDay(nextDate, date[1]) === -1) {
      dateArr.push(nextDate);
      nextDate = __spreadProps(__spreadValues({}, transDateToYearMonthDay(getNextDay(nextDate))), {
        type: "middle"
      });
    }
    return [...dateArr, __spreadProps(__spreadValues({}, date[1]), { type: "end" })];
  }
  return date;
}
const getStartEndDay = (date) => {
  const [start, end] = date;
  if (date.length <= 2) {
    return [start, end];
  }
  return [start, date[date.length - 1]];
};
export {
  calcDateNum,
  calcMiddleDay,
  cloneDate,
  cloneDates,
  compareDay,
  compareMonth,
  daysOfMonth,
  fillNumber,
  formatDate,
  getDayByOffset,
  getDayOfWeek,
  getMaxDate,
  getMinDate,
  getNextDay,
  getPrevDay,
  getStartEndDay,
  getToday,
  pick,
  transDateToHourMinute,
  transDateToYearMonthDay,
  transHourMinuteToDate,
  transYearMontDayToDate
};
