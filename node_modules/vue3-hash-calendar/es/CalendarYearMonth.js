var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { createVNode as _createVNode } from "vue";
import { computed, defineComponent, ref, watch } from "vue";
import CalendarScrollContainer from "./CalendarScrollContainer";
import languageUtil from "./language";
import { isDateInRange, makeDateProp, makeNumberProp, makeStringProp } from "./utils";
const calendarYearMonthProps = {
  minDate: makeDateProp(null),
  maxDate: makeDateProp(null),
  disabledDate: {
    type: Function,
    default: () => false
  },
  checkedDayClassName: makeStringProp(""),
  notCurrentMonthDayClassName: makeStringProp(""),
  disabledClassName: makeStringProp(""),
  type: makeStringProp("date"),
  calendarContentHeight: makeNumberProp(0),
  disabledScroll: {
    type: [Boolean, String],
    default: () => false
  },
  currentYearMonth: {
    type: Object,
    default: () => ({})
  },
  lang: makeStringProp("CN")
};
var stdin_default = defineComponent({
  name: "CalendarYearMonth",
  props: calendarYearMonthProps,
  emits: ["click", "slidechange", "touchstart", "touchmove", "touchend"],
  setup(props, {
    emit
  }) {
    const language = ref({});
    const yearRange = ref(10);
    const disabledScrollDirec = ref(false);
    const yearMonthShow = ref([]);
    const lang = props.lang.toUpperCase();
    language.value = languageUtil[lang];
    const itemHeight = computed(() => props.calendarContentHeight / 4);
    const initYear = (year) => {
      const yearArr = [];
      const currYear = `${year || props.currentYearMonth.year}`;
      const yearStart = parseInt(currYear.substring(0, 3) + "0", 10);
      for (let i = 0; i <= yearRange.value; i++) {
        yearArr.push(yearStart + i);
      }
      yearArr.unshift(yearStart - 1);
      return yearArr;
    };
    const initYearRange = (year) => {
      const yearRangeArr = [];
      const currYear = `${year || props.currentYearMonth.year}`;
      const yearStart = parseInt(currYear.substring(0, 2) + "00", 10);
      for (let i = 0; i <= yearRange.value; i++) {
        yearRangeArr.push({
          s: yearStart + i * 10,
          e: yearStart + i * 10 + 9
        });
      }
      yearRangeArr.unshift({
        s: yearStart - 10,
        e: yearStart - 1
      });
      return yearRangeArr;
    };
    const getThreeYearArr = (year = props.currentYearMonth.year) => {
      const yearStr = year + "";
      const yearStart = yearStr.substring(0, 3);
      const yearStartLast = parseInt(parseInt(yearStart, 10) - 1 + "0", 10);
      const yearStartCurr = parseInt(yearStart + "0", 10);
      const yearStartNext = parseInt(parseInt(yearStart, 10) + 1 + "0", 10);
      return [initYear(yearStartLast), initYear(yearStartCurr), initYear(yearStartNext)];
    };
    const getThreeYearRangeArr = (year = props.currentYearMonth.year) => {
      const yearStr = year + "";
      const yearStart = yearStr.substring(0, 2);
      const yearStartLast = parseInt(parseInt(yearStart, 10) - 1 + "00", 10);
      const yearStartCurr = parseInt(yearStart + "00", 10);
      const yearStartNext = parseInt(parseInt(yearStart, 10) + 1 + "00", 10);
      return [initYearRange(yearStartLast), initYearRange(yearStartCurr), initYearRange(yearStartNext)];
    };
    const getNextOpitonData = () => {
      if (props.type === "year") {
        const year = yearMonthShow.value[2][1];
        yearMonthShow.value = getThreeYearArr(year);
      } else if (props.type === "yearRange") {
        const value = yearMonthShow.value[2][1];
        const year = value.s;
        yearMonthShow.value = getThreeYearRangeArr(year);
      }
    };
    const getLastOptionData = () => {
      if (props.type === "year") {
        const year = yearMonthShow.value[0][1];
        yearMonthShow.value = getThreeYearArr(year);
      } else if (props.type === "yearRange") {
        const value = yearMonthShow.value[0][1];
        const year = value.s;
        yearMonthShow.value = getThreeYearRangeArr(year);
      }
    };
    const slideChange = (direc) => {
      if (direc === "left") {
        getNextOpitonData();
      } else if (direc === "right") {
        getLastOptionData();
      }
      emit("slidechange", direc);
    };
    const getRangeYear = (date) => {
      const yearStart = date.s;
      const yearEnd = date.e;
      const yearArr = [];
      for (let i = yearStart; i <= yearEnd; i++) {
        yearArr.push(i);
      }
      return yearArr;
    };
    const isDisabled = (date, index) => {
      let fDate = new Date();
      if (props.type === "month") {
        fDate = new Date(`${props.currentYearMonth.year}/${index + 1}/01`);
      } else if (props.type === "year") {
        fDate = new Date(`${date}/${props.currentYearMonth.month + 1}/01`);
      } else if (props.type === "yearRange") {
        const yearArr = getRangeYear(date);
        return yearArr.every((year) => {
          fDate = new Date(`${year}/${props.currentYearMonth.month + 1}/01`);
          return props.disabledDate(fDate) || !isDateInRange(fDate, props.minDate, props.maxDate);
        });
      }
      return props.disabledDate(fDate) || !isDateInRange(fDate, props.minDate, props.maxDate);
    };
    const dateClick = (date, index) => {
      if (!date)
        return;
      if (isDisabled(date, index))
        return;
      let checkedDate = __spreadValues({}, props.currentYearMonth);
      if (props.type === "month") {
        checkedDate = __spreadProps(__spreadValues({}, checkedDate), {
          month: index
        });
      }
      if (props.type === "year") {
        checkedDate = __spreadProps(__spreadValues({}, checkedDate), {
          year: date
        });
      }
      if (props.type === "yearRange") {
        const yearArr = getRangeYear(date);
        checkedDate = __spreadProps(__spreadValues({}, checkedDate), {
          year: yearArr.includes(checkedDate.year) ? checkedDate.year : date.s
        });
      }
      emit("click", checkedDate, props.type);
    };
    const isChecked = (date, index) => {
      if (props.type === "month") {
        return index === props.currentYearMonth.month;
      }
      if (props.type === "year") {
        return date === props.currentYearMonth.year;
      }
      if (props.type === "yearRange") {
        return date.s <= props.currentYearMonth.year && date.e >= props.currentYearMonth.year;
      }
    };
    const isNotCurrent = (index) => (index === 0 || index === 11) && (props.type === "year" || props.type === "yearRange");
    const touchStart = (event) => {
      emit("touchstart", event);
    };
    const touchMove = (event) => {
      emit("touchmove", event);
    };
    const touchEnd = (event) => {
      emit("touchend", event);
    };
    watch(() => props.type, (val) => {
      disabledScrollDirec.value = props.disabledScroll;
      if (val === "month" || val === "date") {
        disabledScrollDirec.value = true;
        yearMonthShow.value = [language.value.MONTH, language.value.MONTH, language.value.MONTH];
      } else if (val === "year") {
        yearMonthShow.value = getThreeYearArr();
      } else if (val === "yearRange") {
        yearMonthShow.value = getThreeYearRangeArr();
      }
    });
    const renderYearMonthItem = (arr) => arr.map((item, index) => _createVNode("div", {
      "class": `year-body-item ${isDisabled(item, index) ? props.disabledClassName || "is_disabled" : ""}`,
      "style": {
        height: itemHeight.value + "px"
      },
      "key": index,
      "onClick": () => dateClick(item, index)
    }, [_createVNode("p", {
      "class": `year-body-item-content ${isChecked(item, index) ? props.checkedDayClassName || "is_checked" : ""} ${isNotCurrent(index) ? props.notCurrentMonthDayClassName || "is_not_current" : ""}`,
      "style": {
        width: props.type === "yearRange" ? "92px" : "60px"
      }
    }, [props.type === "yearRange" ? `${item.s}-${item.e}` : props.type === "month" ? language.value.MONTH[index] : item])]));
    const renderYearMonth = () => _createVNode("div", {
      "class": "year-body",
      "style": {
        height: itemHeight.value * 4 + "px",
        display: ["year", "yearRange", "month"].includes(props.type) ? "block" : "none"
      }
    }, [_createVNode(CalendarScrollContainer, {
      "calendarData": yearMonthShow.value,
      "disabledScroll": disabledScrollDirec.value,
      "onTouchstart": touchStart,
      "onTouchmove": touchMove,
      "onTouchend": touchEnd,
      "onSlidechange": slideChange
    }, (data) => renderYearMonthItem(data))]);
    return () => renderYearMonth();
  }
});
export {
  calendarYearMonthProps,
  stdin_default as default
};
