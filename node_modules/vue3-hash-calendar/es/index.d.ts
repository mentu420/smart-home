export declare const Calendar: import("./utils").WithInstall<import("vue").DefineComponent<{
    themeColor: {
        type: import("vue").PropType<import("./types").ThemeColorType>;
        default: () => {};
    };
    changeYearFast: BooleanConstructor;
    showArrow: BooleanConstructor;
    showWeekView: BooleanConstructor;
    visible: BooleanConstructor;
    disabledWeekView: BooleanConstructor;
    showAction: {
        type: BooleanConstructor;
        default: true;
    };
    pickerType: {
        type: import("vue").PropType<import("./types").PickerType>;
        default: import("./types").PickerType;
    };
    selectType: {
        type: import("vue").PropType<import("./types").SelectType>;
        default: import("./types").SelectType;
    };
    defaultYearMonth: {
        type: import("vue").PropType<import("./types").CalendarYearMonthType>;
        default: {};
    };
    allowSameDay: BooleanConstructor;
    showTodayButton: {
        type: BooleanConstructor;
        default: true;
    };
    defaultDatetime: import("vue").PropType<Date | Date[] | null>;
    minDate: {
        type: DateConstructor;
        validator: (val: unknown) => val is Date;
        default: Date | null;
    };
    maxDate: {
        type: DateConstructor;
        validator: (val: unknown) => val is Date;
        default: Date | null;
    };
    maxRange: {
        type: NumberConstructor;
        default: number;
    };
    format: {
        type: import("vue").PropType<string>;
        default: string;
    };
    model: {
        type: import("vue").PropType<import("./types").ModelType>;
        default: import("./types").ModelType;
    };
    markType: {
        type: import("vue").PropType<import("./types").MarkType>;
        default: import("./types").MarkType;
    };
    markDate: {
        type: import("vue").PropType<import("./types").MarkDateType[]>;
        default: () => never[];
    };
    disabledDate: {
        type: FunctionConstructor;
        default: () => boolean;
    };
    disabledTime: {
        type: FunctionConstructor;
        default: () => boolean;
    };
    lang: {
        type: import("vue").PropType<import("./types").LangType>;
        default: import("./types").LangType;
    };
    scrollChangeDate: {
        type: BooleanConstructor;
        default: true;
    };
    minuteStep: {
        type: NumberConstructor;
        default: number;
    };
    weekStart: {
        type: import("vue").PropType<import("./types").WeekStartType>;
        default: import("./types").WeekStartType;
    };
    disabledScroll: {
        type: import("vue").PropType<import("./types").DisabledScrollType>;
        default: () => boolean;
    };
    showNotCurrentMonthDay: {
        type: BooleanConstructor;
        default: true;
    };
    firstDayOfMonthClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    todayClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    checkedDayClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    notCurrentMonthDayClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    disabledClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, () => JSX.Element | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:showWeekView" | "click" | "change" | "overRange" | "slidechange" | "touchstart" | "touchmove" | "touchend" | "update:visible" | "calendarTypeChange" | "confirm")[], "update:showWeekView" | "click" | "change" | "overRange" | "slidechange" | "touchstart" | "touchmove" | "touchend" | "update:visible" | "calendarTypeChange" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    themeColor: {
        type: import("vue").PropType<import("./types").ThemeColorType>;
        default: () => {};
    };
    changeYearFast: BooleanConstructor;
    showArrow: BooleanConstructor;
    showWeekView: BooleanConstructor;
    visible: BooleanConstructor;
    disabledWeekView: BooleanConstructor;
    showAction: {
        type: BooleanConstructor;
        default: true;
    };
    pickerType: {
        type: import("vue").PropType<import("./types").PickerType>;
        default: import("./types").PickerType;
    };
    selectType: {
        type: import("vue").PropType<import("./types").SelectType>;
        default: import("./types").SelectType;
    };
    defaultYearMonth: {
        type: import("vue").PropType<import("./types").CalendarYearMonthType>;
        default: {};
    };
    allowSameDay: BooleanConstructor;
    showTodayButton: {
        type: BooleanConstructor;
        default: true;
    };
    defaultDatetime: import("vue").PropType<Date | Date[] | null>;
    minDate: {
        type: DateConstructor;
        validator: (val: unknown) => val is Date;
        default: Date | null;
    };
    maxDate: {
        type: DateConstructor;
        validator: (val: unknown) => val is Date;
        default: Date | null;
    };
    maxRange: {
        type: NumberConstructor;
        default: number;
    };
    format: {
        type: import("vue").PropType<string>;
        default: string;
    };
    model: {
        type: import("vue").PropType<import("./types").ModelType>;
        default: import("./types").ModelType;
    };
    markType: {
        type: import("vue").PropType<import("./types").MarkType>;
        default: import("./types").MarkType;
    };
    markDate: {
        type: import("vue").PropType<import("./types").MarkDateType[]>;
        default: () => never[];
    };
    disabledDate: {
        type: FunctionConstructor;
        default: () => boolean;
    };
    disabledTime: {
        type: FunctionConstructor;
        default: () => boolean;
    };
    lang: {
        type: import("vue").PropType<import("./types").LangType>;
        default: import("./types").LangType;
    };
    scrollChangeDate: {
        type: BooleanConstructor;
        default: true;
    };
    minuteStep: {
        type: NumberConstructor;
        default: number;
    };
    weekStart: {
        type: import("vue").PropType<import("./types").WeekStartType>;
        default: import("./types").WeekStartType;
    };
    disabledScroll: {
        type: import("vue").PropType<import("./types").DisabledScrollType>;
        default: () => boolean;
    };
    showNotCurrentMonthDay: {
        type: BooleanConstructor;
        default: true;
    };
    firstDayOfMonthClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    todayClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    checkedDayClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    notCurrentMonthDayClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    disabledClassName: {
        type: import("vue").PropType<string>;
        default: string;
    };
}>> & {
    "onUpdate:showWeekView"?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onOverRange?: ((...args: any[]) => any) | undefined;
    onSlidechange?: ((...args: any[]) => any) | undefined;
    onTouchstart?: ((...args: any[]) => any) | undefined;
    onTouchmove?: ((...args: any[]) => any) | undefined;
    onTouchend?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onCalendarTypeChange?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
}, {
    showWeekView: boolean;
    disabledWeekView: boolean;
    selectType: import("./types").SelectType;
    allowSameDay: boolean;
    defaultYearMonth: import("./types").CalendarYearMonthType;
    minDate: Date;
    maxDate: Date;
    maxRange: number;
    markType: import("./types").MarkType;
    markDate: import("./types").MarkDateType[];
    disabledDate: Function;
    lang: import("./types").LangType;
    scrollChangeDate: boolean;
    weekStart: import("./types").WeekStartType;
    disabledScroll: import("./types").DisabledScrollType;
    showNotCurrentMonthDay: boolean;
    firstDayOfMonthClassName: string;
    todayClassName: string;
    checkedDayClassName: string;
    notCurrentMonthDayClassName: string;
    disabledClassName: string;
    disabledTime: Function;
    minuteStep: number;
    themeColor: import("./types").ThemeColorType;
    changeYearFast: boolean;
    showArrow: boolean;
    visible: boolean;
    showAction: boolean;
    pickerType: import("./types").PickerType;
    showTodayButton: boolean;
    format: string;
    model: import("./types").ModelType;
}>>;
export default Calendar;
export { calendarProps } from './Calendar';
export type { CalendarPropsType } from './Calendar';
export type { CalendarDateType, CalendarPanelType, CalendarExposeType, } from './types';
declare module 'vue' {
    interface GlobalComponents {
        VueHashCalendar: typeof Calendar;
    }
}
