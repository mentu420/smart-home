import { ExtractPropTypes, PropType } from 'vue';
import { DisabledScrollType } from './types';
export declare const calendarScrollContainerProps: {
    disabledScroll: {
        type: PropType<DisabledScrollType>;
        default: () => boolean;
    };
    calendarData: {
        type: PropType<any[]>;
        default: () => never[];
    };
};
export declare type CalendarScrollContainerPropsType = ExtractPropTypes<typeof calendarScrollContainerProps>;
declare const _default: import("vue").DefineComponent<{
    disabledScroll: {
        type: PropType<DisabledScrollType>;
        default: () => boolean;
    };
    calendarData: {
        type: PropType<any[]>;
        default: () => never[];
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("slidechange" | "touchstart" | "touchmove" | "touchend")[], "slidechange" | "touchstart" | "touchmove" | "touchend", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<ExtractPropTypes<{
    disabledScroll: {
        type: PropType<DisabledScrollType>;
        default: () => boolean;
    };
    calendarData: {
        type: PropType<any[]>;
        default: () => never[];
    };
}>> & {
    onSlidechange?: ((...args: any[]) => any) | undefined;
    onTouchstart?: ((...args: any[]) => any) | undefined;
    onTouchmove?: ((...args: any[]) => any) | undefined;
    onTouchend?: ((...args: any[]) => any) | undefined;
}, {
    disabledScroll: DisabledScrollType;
    calendarData: any[];
}>;
export default _default;
